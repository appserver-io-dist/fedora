<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/fedora" basedir="." default="build">

    <!-- Readin enviroment properties to env property -->
    <property environment="env" />

    <!-- Generate a timestamp to time.stamp property -->
    <tstamp>
        <format property="time.stamp" pattern="yyyy.MM.dd.HHmmss"/>
    </tstamp>

    <!-- Readin build property files -->
    <property file="${basedir}/build.properties"/>
    <property file="${basedir}/build.default.properties"/>

    <!-- Set directory properties -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="target.dir" value="${basedir}/target" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="temp.dir" value="${basedir}/tmp" />

    <!-- ==================================================================== -->
    <!-- Cleans the target directories                                        -->
    <!-- ==================================================================== -->
    <target name="clean">
        <delete dir="${target.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
        <delete dir="${temp.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Cleans the build directories                                         -->
    <!-- ==================================================================== -->
    <target name="clean-build">
        <delete dir="${build.dir}" includeemptydirs="true" quiet="false" verbose="false" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the target dir                                              -->
    <!-- ==================================================================== -->
    <target name="prepare" depends="clean">
        <mkdir dir="${target.dir}" />
        <mkdir dir="${temp.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the build environment                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-build" depends="clean-build">
        <mkdir dir="${build.dir}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Installs composer in target directory                                -->
    <!-- ==================================================================== -->
    <target name="install-composer">
        <get src="https://getcomposer.org/installer" dest="${temp.dir}/composer-installer" />
        <exec dir="${temp.dir}" executable="php">
            <arg value="composer-installer" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Prepares the appserver sources                                       -->
    <!-- ==================================================================== -->
    <target name="prepare-appserver-dist" depends="prepare">
        <!-- install local composer -->
        <antcall target="install-composer" />
        <!-- clone appserver src -->
        <exec dir="${temp.dir}" executable="git">
            <arg line="clone https://${github.oauth.token}:x-oauth-basic@github.com/${appserver.src.repo} appserver-src" />
        </exec>
        <!-- get lastest tag version -->
        <exec dir="${temp.dir}/appserver-src" executable="git" outputProperty="appserver.src.version">
            <arg line="describe --abbrev=0 --tags" />
        </exec>
        <echo message="Checkout lastest tag version ${appserver.src.version}" />
        <!-- checkout lastest tag version -->
        <exec dir="${temp.dir}/appserver-src" executable="git">
            <arg line="checkout -q ${appserver.src.version}" />
        </exec>
        <!-- move to target.dir -->
        <move todir="${target.dir}/src/opt/appserver">
            <fileset dir="${temp.dir}/appserver-src"/>
        </move>
        <!-- remove git db files -->
        <delete dir="${target.dir}/src/opt/appserver/.git" includeemptydirs="true" />
        <!-- install dependencies via composer and let postinstall-scripts proceed -->
        <exec dir="${target.dir}/src/opt/appserver" executable="php">
            <arg line="${temp.dir}/composer.phar install --prefer-dist --quiet --no-interaction --ignore-platform-reqs"/>
        </exec>
        <!-- create deploy folder if not exists -->
        <mkdir dir="${target.dir}/src/opt/appserver/deploy"/>
        <!-- deploy example app by putting it into deploy folder of runtime -->
        <get src="${appserver.apps.example.url}" dest="${target.dir}/src/opt/appserver/deploy/example.phar" />
        <!-- create the .dodeploy files -->
        <touch file="${target.dir}/src/opt/appserver/deploy/example.phar.dodeploy" />
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a RPM package with the appserver sources                     -->
    <!-- ==================================================================== -->
    <target name="create-appserver-dist-rpm" depends="prepare-appserver-dist, prepare-src-version-parts" description="Creates a RPM package with appserver sources">
        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}/src">
            <fileset dir="${src.dir}/dist">
                <include name="**/*"/>
                <exclude name="rpmbuild/**"/>
            </fileset>
        </copy>
        <copy todir="${target.dir}/src">
            <fileset dir="${src.dir}/dist">
                <include name="rpmbuild/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>

        <!-- create the .rpm file -->
        <exec dir="${target.dir}" executable="rpmbuild" failonerror="true">
            <arg line="--buildroot ${target.dir}/src -bb ${target.dir}/src/rpmbuild/SPECS/appserver.spec"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates a RPM package for the appserver runtime                      -->
    <!-- ==================================================================== -->
    <target name="create-appserver-runtime-rpm" depends="prepare, prepare-runtime-version-parts">
        <!-- get runtime in specific version as tar.gz -->
        <get src="${appserver.runtime.url}" dest="${temp.dir}/${build.name.prefix}runtime-${appserver.runtime.version}${build.name.suffix}.tar.gz"/>
        <untar src="${temp.dir}/${build.name.prefix}runtime-${appserver.runtime.version}${build.name.suffix}.tar.gz" dest="${target.dir}/opt" compression="gzip" />
        <mkdir dir="${target.dir}/opt" />
        <exec executable="tar">
            <arg value="-xzf"/>
            <arg value="${temp.dir}/${build.name.prefix}runtime-${appserver.runtime.version}${build.name.suffix}.tar.gz"/>
            <arg value="-p"/>
            <arg value="-C"/>
            <arg value="${target.dir}/opt"/>
        </exec>

        <!-- copy packaging build files to target -->
        <copy todir="${target.dir}/runtime">
            <fileset dir="${src.dir}/runtime">
                <include name="rpmbuild/**"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>

        <!-- create the .rpm file -->
        <exec dir="${target.dir}" executable="rpmbuild" failonerror="true">
            <arg line="--buildroot ${target.dir} -bb ${target.dir}/runtime/rpmbuild/SPECS/appserver.spec"/>
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will check if a download of the appserver src is needed              -->
    <!-- ==================================================================== -->
    <target name="check-appserver-src-needed">
        <!-- clone appserver src -->
        <condition property="appserver.src.unneeded">
            <or>
                <available file="${temp.dir}/appserver-src" property="appserver.src.present"/>
                <isset property="appserver.src.version"/>
            </or>
        </condition>
    </target>

    <!-- ==================================================================== -->
    <!-- Will download the appserver src unless it is not needed              -->
    <!-- ==================================================================== -->
    <target name="get-appserver-src" depends="check-appserver-src-needed" unless="appserver.src.unneeded">
        <!-- clone appserver src -->
        <exec dir="${temp.dir}" executable="git">
            <arg line="clone https://${github.oauth.token}:x-oauth-basic@github.com/${appserver.src.repo} appserver-src" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will provide the appserver.src.version property if not defined       -->
    <!-- already                                                              -->
    <!-- ==================================================================== -->
    <target name="get-appserver-src-version" depends="get-appserver-src">
        <!-- get lastest tag version -->
        <exec dir="${temp.dir}/appserver-src" executable="git" outputProperty="appserver.src.version">
            <arg line="describe --abbrev=0 --tags" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will split the github tag into a semver version (e.g. 1.0.0) and a   -->
    <!-- suffix (e.g. beta)                                                   -->
    <!-- ==================================================================== -->
    <target name="prepare-src-version-parts" depends="get-appserver-src-version">
        <!-- filter the version string -->
        <filter-version param="${appserver.src.version}" />
        <property name="appserver.src.semver" value="${RESULT_VERSION}" />
        <property name="appserver.src.suffix" value="${RESULT_BUILD-NUMBER}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will split the github tag into a semver version (e.g. 1.0.0) and a   -->
    <!-- suffix (e.g. beta)                                                   -->
    <!-- ==================================================================== -->
    <target name="prepare-runtime-version-parts">
        <!-- filter the version string -->
        <filter-version param="${appserver.runtime.version}" />
        <property name="appserver.runtime.semver" value="${RESULT_VERSION}" />
        <property name="appserver.runtime.suffix" value="${RESULT_BUILD-NUMBER}" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will split a string at the "-" character                             -->
    <!-- ==================================================================== -->
    <scriptdef name="filter-version" language="javascript">
        <attribute name="param"/>
        <![CDATA[
       // getting the param
        var param = attributes.get("param");

        // preset the return values
        var resultVersion = param;
        var resultBuildNumber = '';

        // split if necessary
        if (param.indexOf("-") !== -1) {

           resultVersion = param.substring(0, param.indexOf("-"));
           resultBuildNumber = param.replace(resultVersion + "-", "");
        }

        // store the result in new properties
        project.setProperty("RESULT_VERSION", resultVersion);
        project.setProperty("RESULT_BUILD-NUMBER", resultBuildNumber);
    ]]>
    </scriptdef>

    <!-- ==================================================================== -->
    <!-- Moves the freshly built files from the RPM build directory to the    -->
    <!-- jenkins one                                                          -->
    <!-- ==================================================================== -->
    <target name="move-build-files" depends="prepare-src-version-parts, prepare-runtime-version-parts">
        <!-- move the files -->
        <move file="${package.specific.dir}/${build.name.prefix}dist-${appserver.src.semver}-${appserver.src.suffix}.${build.number}${build.name.suffix}.${os.architecture}.rpm" todir="${build.dir}" failonerror="true"/>
        <move file="${package.specific.dir}/${build.name.prefix}runtime-${appserver.runtime.semver}${appserver.runtime.suffix}${build.name.suffix}.${os.architecture}.rpm" todir="${build.dir}" failonerror="true"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Copies any built package to the snapshot hosting server.             -->
    <!-- ==================================================================== -->
    <target name="upload-builds" depends="move-build-files" description="Uploads any built package to the file-server.">
        <echo message="Now try to upload all builds to file-server"/>
        <exec executable="sh" failonerror="true">
            <arg value="-c" />
            <arg value="scp -o StrictHostKeyChecking=no -i ${user.home}/.ssh/id_rsa ${build.dir}/* ${build.server.user}@${build.server.host}:${build.server.upload-path}" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Creates all RPM packages and uploads them to builds file-server      -->
    <!-- ==================================================================== -->
    <target name="build" depends="prepare-build, create-appserver-dist-rpm, create-appserver-runtime-rpm">
        <!-- yet nothing special to do -->
    </target>

</project>
